generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
  MANAGER
  DIRECTOR
  RESPONSIBLE
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  phone    String
  password String
  roles    Role[] @default([MEMBER])

  companyId String?  @map("company_id")
  company   Company? @relation(fields: [companyId], references: [id])

  configuration Configuration?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
}

model Company {
  id          String  @id @default(uuid())
  name        String
  email       String  @unique
  contact     String
  responsible String
  password    String
  isActive    Boolean @default(true)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  categories    Category[]
  users         User[]
  products      Product[]
  configuration Configuration[]
  styles        Style[]

  @@map("companies")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  isActive  Boolean
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  iconId String? @map("icon_id")
  icon   File?   @relation(fields: [iconId], references: [id])

  parentId String?   @map("parent_id")
  parent   Category? @relation(fields: [parentId], references: [id], name: "child_categories")

  children Category[] @relation("child_categories")

  products Product[]

  @@map("categories")
}

model Configuration {
  id                         String  @id @default(uuid())
  daysBeforeOldStock         Int     @map("days_before_old_stock")
  warningDays                Int     @map("warning_days")
  emailNotification          Boolean @map("email_notification")
  systemNotification         Boolean @map("system_notification")
  autoDiscardAfterExpiration Boolean @map("auto_discard_after_expiration")
  freeShippingOnOldStock     Boolean @map("free_shipping_on_old_stock")
  reportFrequency            String  @map("report_frequency")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@map("configurations")
}

model Style {
  id String @id @default(uuid())

  name            String
  isActive        Boolean @default(false) @map("is_active")
  backgroundColor String  @map("background_color")
  textColor       String  @map("text_color")
  primaryColor    String  @map("primary_color")
  secondaryColor  String  @map("secondary_color")
  tertiaryColor   String  @map("tertiary_color")

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("styles")
}

enum StatusProduct {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

model Product {
  id          String @id @default(uuid())
  name        String
  slug        String
  description String

  originalPrice      Int @map("original_price")
  finalPrice         Int @map("final_price")
  discountPercentage Int @map("discount_percentage")

  quantityInStock Int      @map("quantity_in_stock")
  manufactureDate DateTime @map("manufacture_date")
  dueDate         DateTime @map("due_date")
  validityInDays  Int      @map("validity_in_days")

  unitOfMeasure String @map("unit_of_measure")
  weight        Int

  dimensionsHeight String @map("dimensions_height")
  dimensionsWidth  String @map("dimensions_width")
  dimensionsDepth  String @map("dimensions_depth")

  manufacturer String?
  batch        String?

  status StatusProduct

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  categories Category[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("products")
}

model File {
  id       String @id @default(uuid())
  path     String @db.VarChar(255)
  size     Int
  filename String @db.VarChar(255)

  categories Category[]

  createdAt DateTime  @map(name: "created_at") @db.Timestamp(6)
  updatedAt DateTime? @map(name: "updated_at") @db.Timestamp(6)
  deletedAt DateTime? @map(name: "deleted_at") @db.Timestamp(6)

  @@map("files")
}
